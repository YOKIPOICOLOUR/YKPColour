import cv2
import mss
import numpy as np
import serial
import time
import win32api
import tkinter as tk
from tkinter import messagebox
from colorama import Fore, Style
import pyautogui
import configparser

# Load config from INI file
def load_config():
    global config
    parser = configparser.ConfigParser()
    parser.read('config.ini')
    
    config = {
        "AIM_KEY": int(parser.get('DEFAULT', 'AIM_KEY'), 16),
        "TRIGGER_KEY": int(parser.get('DEFAULT', 'TRIGGER_KEY'), 16),
        "X_FOV": int(parser.get('DEFAULT', 'X_FOV')),
        "Y_FOV": int(parser.get('DEFAULT', 'Y_FOV')),
        "LOWER_COLOR": [int(x) for x in parser.get('DEFAULT', 'LOWER_COLOR').split(',')],
        "UPPER_COLOR": [int(x) for x in parser.get('DEFAULT', 'UPPER_COLOR').split(',')],
        "AIM_OFFSET": int(parser.get('DEFAULT', 'AIM_OFFSET')),
        "X_SPEED": int(parser.get('DEFAULT', 'X_SPEED')),
        "Y_SPEED": int(parser.get('DEFAULT', 'Y_SPEED')),
        "COM_PORT": parser.get('DEFAULT', 'COM_PORT')
    }

class Yokipoi:
    def __init__(self, config):
        self.mouse = Mouse(config["COM_PORT"])
        self.capture = Capture(config["X_FOV"], config["Y_FOV"])
        self.config = config
    
    def listen(self):
        while True:
            if win32api.GetAsyncKeyState(self.config["AIM_KEY"]) < 0:
                self.run("aim")
            if win32api.GetAsyncKeyState(self.config["TRIGGER_KEY"]) < 0:
                self.run("click")

            time.sleep(0.008)
                
    def run(self, task):
        hsv = cv2.cvtColor(self.capture.get_screen(), cv2.COLOR_BGR2HSV)
        mask = cv2.inRange(hsv, np.array(self.config["LOWER_COLOR"]), np.array(self.config["UPPER_COLOR"]))
        kernel = np.ones((3, 3), np.uint8)
        dilated = cv2.dilate(mask, kernel, iterations=5)
        thresh = cv2.threshold(dilated, 60, 255, cv2.THRESH_BINARY)[1]
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        if contours:
            screen_center = (self.config["X_FOV"] // 2, self.config["Y_FOV"] // 2)
            min_distance = float('inf')
            closest_contour = None

            for contour in contours:
                x, y, w, h = cv2.boundingRect(contour)
                center = (x + w // 2, y + h // 2)
                distance = ((center[0] - screen_center[0]) ** 2 + (center[1] - screen_center[1]) ** 2) ** 0.5

                if distance < min_distance:
                    min_distance = distance
                    closest_contour = contour

            if closest_contour is not None:
                x, y, w, h = cv2.boundingRect(closest_contour)
                cX = x + w // 2
                top_most_y = y + self.config["AIM_OFFSET"]

                x_offset = cX - screen_center[0]
                y_offset = top_most_y - screen_center[1]

                if task == "aim":
                    self.mouse.move(x_offset * (self.config["X_SPEED"] * 0.1), y_offset * (self.config["Y_SPEED"] * 0.1))

                if task == "click":
                    if abs(x_offset) <= 3 and abs(y_offset) <= 7:
                        self.mouse.click()

class Mouse:
    def __init__(self, com_port):
        self.serial_port = serial.Serial()
        self.serial_port.baudrate = 115200
        self.serial_port.timeout = 0
        self.serial_port.port = com_port
        try:
            self.serial_port.open()
            print(f"{Fore.GREEN}\t\t\t\t\t\t\b\b{Fore.LIGHTBLACK_EX}[{Fore.GREEN}Yokipoi Gaming Hack Application is running...{Fore.LIGHTBLACK_EX}]{Style.RESET_ALL}")
        except serial.SerialException:
            print(f"{Fore.RED}\t\t\t\t[Failed to open serial port. Please check the COM port.{Style.RESET_ALL}")
            time.sleep(10)

    def move(self, x, y):
        self.serial_port.write(f'{x},{y}\n'.encode())

    def click(self):
        self.serial_port.write('CLICK\n'.encode())

class Capture:
    def __init__(self, x_fov, y_fov):
        monitor_size = pyautogui.size()
        self.region = self.calculate_region(monitor_size, x_fov, y_fov)

    def calculate_region(self, monitor_size, x_fov, y_fov):
        x_center = monitor_size.width // 2
        y_center = monitor_size.height // 2
        left = x_center - x_fov // 2
        top = y_center - y_fov // 2
        width = x_fov
        height = y_fov
        return {'left': left, 'top': top, 'width': width, 'height': height}

    def get_screen(self):
        with mss.mss() as sct:
            screenshot = sct.grab(self.region)
            return np.array(screenshot)

def update_config():
    parser = configparser.ConfigParser()
    parser.read('config.ini')

    parser.set('DEFAULT', 'AIM_KEY', aim_key_entry.get())
    parser.set('DEFAULT', 'TRIGGER_KEY', trigger_key_entry.get())
    parser.set('DEFAULT', 'X_FOV', x_fov_entry.get())
    parser.set('DEFAULT', 'Y_FOV', y_fov_entry.get())
    parser.set('DEFAULT', 'LOWER_COLOR', f"{lower_h_entry.get()},{lower_s_entry.get()},{lower_v_entry.get()}")
    parser.set('DEFAULT', 'UPPER_COLOR', f"{upper_h_entry.get()},{upper_s_entry.get()},{upper_v_entry.get()}")
    parser.set('DEFAULT', 'AIM_OFFSET', aim_offset_entry.get())
    parser.set('DEFAULT', 'X_SPEED', x_speed_entry.get())
    parser.set('DEFAULT', 'Y_SPEED', y_speed_entry.get())
    parser.set('DEFAULT', 'COM_PORT', com_port_entry.get())

    with open('config.ini', 'w') as config_file:
        parser.write(config_file)

def save_config():
    update_config()
    messagebox.showinfo("Info", "Konfigurasi disimpan!")

load_config()

# GUI
root = tk.Tk()
root.title("Colourbot Configurator")

# Labels
tk.Label(root, text="AIM Key (Hex):").grid(row=0, column=0)
tk.Label(root, text="Trigger Key (Hex):").grid(row=1, column=0)
tk.Label(root, text="X FOV:").grid(row=2, column=0)
tk.Label(root, text="Y FOV:").grid(row=3, column=0)
tk.Label(root, text="Lower H:").grid(row=4, column=0)
tk.Label(root, text="Lower S:").grid(row=5, column=0)
tk.Label(root, text="Lower V:").grid(row=6, column=0)
tk.Label(root, text="Upper H:").grid(row=7, column=0)
tk.Label(root, text="Upper S:").grid(row=8, column=0)
tk.Label(root, text="Upper V:").grid(row=9, column=0)
tk.Label(root, text="AIM Offset:").grid(row=10, column=0)
tk.Label(root, text="X Speed:").grid(row=11, column=0)
tk.Label(root, text="Y Speed:").grid(row=12, column=0)
tk.Label(root, text="COM Port:").grid(row=13, column=0)

# Entries
aim_key_entry = tk.Entry(root)
aim_key_entry.grid(row=0, column=1)
aim_key_entry.insert(0, hex(config["AIM_KEY"]))

trigger_key_entry = tk.Entry(root)
trigger_key_entry.grid(row=1, column=1)
trigger_key_entry.insert(0, hex(config["TRIGGER_KEY"]))

x_fov_entry = tk.Entry(root)
x_fov_entry.grid(row=2, column=1)
x_fov_entry.insert(0, config["X_FOV"])

y_fov_entry = tk.Entry(root)
y_fov_entry.grid(row=3, column=1)
y_fov_entry.insert(0, config["Y_FOV"])

lower_h_entry = tk.Entry(root)
lower_h_entry.grid(row=4, column=1)
lower_h_entry.insert(0, config["LOWER_COLOR"][0])

lower_s_entry = tk.Entry(root)
lower_s_entry.grid(row=5, column=1)
lower_s_entry.insert(0, config["LOWER_COLOR"][1])

lower_v_entry = tk.Entry(root)
lower_v_entry.grid(row=6, column=1)
lower_v_entry.insert(0, config["LOWER_COLOR"][2])

upper_h_entry = tk.Entry(root)
upper_h_entry.grid(row=7, column=1)
upper_h_entry.insert(0, config["UPPER_COLOR"][0])

upper_s_entry = tk.Entry(root)
upper_s_entry.grid(row=8, column=1)
upper_s_entry.insert(0, config["UPPER_COLOR"][1])

upper_v_entry = tk.Entry(root)
upper_v_entry.grid(row=9, column=1)
upper_v_entry.insert(0, config["UPPER_COLOR"][2])

aim_offset_entry = tk.Entry(root)
aim_offset_entry.grid(row=10, column=1)
aim_offset_entry.insert(0, config["AIM_OFFSET"])

x_speed_entry = tk.Entry(root)
x_speed_entry.grid(row=11, column=1)
x_speed_entry.insert(0, config["X_SPEED"])

y_speed_entry = tk.Entry(root)
y_speed_entry.grid(row=12, column=1)
y_speed_entry.insert(0, config["Y_SPEED"])

com_port_entry = tk.Entry(root)
com_port_entry.grid(row=13, column=1)
com_port_entry.insert(0, config["COM_PORT"])

# Buttons
update_button = tk.Button(root, text="Update Config", command=update_config)
update_button.grid(row=14, column=0, columnspan=2)

save_button = tk.Button(root, text="Save Config", command=save_config)
save_button.grid(row=15, column=0, columnspan=2)

yokipoi = Yokipoi(config)
yokipoi.listen()

root.mainloop()
